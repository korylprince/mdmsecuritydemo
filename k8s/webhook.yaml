---
apiVersion: v1
kind: ConfigMap
metadata:
  name: webhook
  namespace: nanomdm
data:
  webhook.py: |
    from flask import Flask, request, abort
    import base64
    import plistlib
    import json

    app = Flask(__name__)

    def clean_json(obj):
        if isinstance(obj, dict):
            new = dict()
            for k, v in obj.items():
                new[clean_json(k)] = clean_json(v)
            return new
        elif isinstance(obj, list):
            return [clean_json(i) for i in obj]
        elif isinstance(obj, tuple):
            return tuple([clean_json(i) for i in obj])
        elif isinstance(obj, bytes):
            try:
                return obj.decode("utf-8")
            except:
                return repr(obj)
        else:
            return obj

    @app.route("/", methods=["POST"])
    def webhook():
        r = request.json

        if "acknowledge_event" in r:
            payload = base64.b64decode(r["acknowledge_event"]["raw_payload"])
            del r["acknowledge_event"]["raw_payload"]
            r["acknowledge_event"]["payload"] = plistlib.loads(payload)

        if "checkin_event" in r:
            payload = base64.b64decode(r["checkin_event"]["raw_payload"])
            del r["checkin_event"]["raw_payload"]
            r["checkin_event"]["payload"] = plistlib.loads(payload)

        try:
            print(json.dumps(clean_json(r), indent=4))
        except:
            print(repr(clean_json(r)))
        return ""

    app.run(host="0.0.0.0", port=8080)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook
  namespace: nanomdm
  labels:
    app: webhook
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webhook
  template:
    metadata:
      labels:
        app: webhook
    spec:
      volumes:
        - name: webhook
          configMap:
            name: webhook
            items:
              - key: webhook.py
                path: webhook.py
      containers:
      - name: webhook
        image: python:3.12
        command:
          - /bin/bash
          - "-c"
          - "pip install Flask && python3 /webhook.py"
        ports:
        - containerPort: 9000
        volumeMounts:
        - name: webhook
          mountPath: /webhook.py
          subPath: webhook.py

---
apiVersion: v1
kind: Service
metadata:
  name: webhook
  namespace: nanomdm
spec:
  selector:
    app: webhook
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

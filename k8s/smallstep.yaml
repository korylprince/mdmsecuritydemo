apiVersion: v1
kind: Namespace
metadata:
  name: smallstep

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: smallstep
  namespace: smallstep
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: smallstep
  namespace: smallstep

---
apiVersion: v1
kind: Secret
metadata:
  name: provisioner-password
  namespace: smallstep
  annotations:
    secret-generator.v1.mittwald.de/autogenerate: password

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: template
  namespace: smallstep
data:
  template.json: |
    {
        "subject": {{ toJson .Subject }},
    {{- if typeIs "*rsa.PublicKey" .Insecure.CR.PublicKey }}
        "keyUsage": ["keyEncipherment", "digitalSignature"],
    {{- else }}
        "keyUsage": ["digitalSignature"],
    {{- end }}
        "extKeyUsage": ["serverAuth", "clientAuth"]
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: init
  namespace: smallstep
data:
  init.sh: |
    #!/bin/bash
    set -euxo pipefail

    if [ ! -f "${STEPPATH}/config/ca.json" ]; then
        /usr/local/bin/step ca init \
          --root=/etc/smallstep/ca.crt \
          --key=/etc/smallstep/tls.key \
          --deployment-type=standalone \
          --remote-management \
          --name=smallstep \
          --provisioner=admin \
          --dns=localhost \
          --dns=smallstep \
          --dns=smallstep.smallstep \
          --address=:443 \
          --acme \
          --password-file=/etc/smallstep/passwords/provisioner-password

      # start server for config changes
      /usr/local/bin/step-ca /data/config/ca.json --password-file=/etc/smallstep/passwords/provisioner-password &
      sleep 5

      # configure acme device challenge
      /usr/local/bin/step ca provisioner update acme \
        --admin-subject=step --admin-provisioner=admin --admin-password-file=/etc/smallstep/passwords/provisioner-password \
        --ca-url=https://localhost:443 --challenge=device-attest-01 --attestation-format=apple \
        --x509-template=/etc/smallstep/templates/template.json

      # configure webhook
      /usr/local/bin/step ca provisioner webhook add acme webhook \
        --admin-subject=step --admin-provisioner=admin --admin-password-file=/etc/smallstep/passwords/provisioner-password \
        --bearer-token-file /etc/smallstep/keys/webhook-key \
        --url 'https://dynamicacme.dynamicacme/webhook'

      # create config map from intermediate for nanomdm
      cat > /tmp/intermediate.yaml <<EOF
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: intermediate-ca
        namespace: nanomdm
      binaryData:
        intermediate.crt: "$(cat /data/certs/intermediate_ca.crt | base64 -w 0)"
    EOF

      curl --cacert /run/secrets/kubernetes.io/serviceaccount/ca.crt \
        -X PATCH \
        -H "Authorization: Bearer $(cat /run/secrets/kubernetes.io/serviceaccount/token)" \
        -H "Content-Type: application/apply-patch+yaml" \
        --data-binary @/tmp/intermediate.yaml \
        https://kubernetes.default.svc/api/v1/namespaces/nanomdm/configmaps/intermediate-ca?fieldManager=curl

    else
      echo "config exists"
    fi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: smallstep
  namespace: smallstep
  labels:
    app: smallstep
spec:
  replicas: 1
  selector:
    matchLabels:
      app: smallstep
  template:
    metadata:
      labels:
        app: smallstep
    spec:
      serviceAccountName: smallstep
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: smallstep
        - name: ca
          secret:
            secretName: ca-secret
            items:
            - key: ca.crt
              path: ca.crt
            - key: tls.key
              path: tls.key
        - name: provisioner-password
          secret:
            secretName: provisioner-password
            items:
              - key: password
                path: provisioner-password
        - name: webhook-key
          secret:
            secretName: webhook-key
            items:
              - key: password
                path: webhook-key
        - name: init
          configMap:
            name: init
            items:
              - key: init.sh
                path: init.sh
        - name: template
          configMap:
            name: template
            items:
              - key: template.json
                path: template.json

      initContainers:
      - name: init
        image: smallstep/step-ca:0.28.3
        command:
          - /bin/bash
          - /init.sh
        env:
          - name: STEPPATH
            value: /data
        volumeMounts:
          - name: "data"
            mountPath: data
          - name: "ca"
            mountPath: /etc/smallstep
          - name: "provisioner-password"
            mountPath: /etc/smallstep/passwords
          - name: "template"
            mountPath: /etc/smallstep/templates
          - name: "webhook-key"
            mountPath: /etc/smallstep/keys
          - name: init
            mountPath: /init.sh
            subPath: init.sh

      containers:
        - name: smallstep
          image: smallstep/step-ca:0.28.3
          command:
            - "/usr/local/bin/step-ca"
            - "/data/config/ca.json"
            - "--password-file=/etc/smallstep/passwords/provisioner-password"
          env:
            - name: STEPPATH
              value: /data
          ports:
            - containerPort: 443
          volumeMounts:
            - name: "data"
              mountPath: /data
            - name: "ca"
              mountPath: /etc/smallstep
            - name: "provisioner-password"
              mountPath: /etc/smallstep/passwords
            - name: "template"
              mountPath: /etc/smallstep/templates

---
apiVersion: traefik.io/v1alpha1
kind: ServersTransport
metadata:
  name: smallstep-trust
  namespace: smallstep
spec:
  serverName: smallstep
  rootCAsSecrets:
    - ca-secret

---
apiVersion: v1
kind: Service
metadata:
  name: smallstep
  namespace: smallstep
  annotations:
    traefik.ingress.kubernetes.io/service.serversscheme: https
    traefik.ingress.kubernetes.io/service.serverstransport: smallstep-smallstep-trust@kubernetescrd
spec:
  selector:
    app: smallstep
  ports:
    - protocol: TCP
      port: 443
      targetPort: 443

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  namespace: smallstep
  annotations:
    traefik.ingress.kubernetes.io/router.middlewares: kube-system-https-redirect@kubernetescrd
spec:
  rules:
  - host: "mycoolmdm.stream"
    http:
      paths:
      - path: /acme/acme/
        pathType: Prefix
        backend:
          service:
            name: smallstep
            port:
              number: 443
  tls:
    - secretName: ingress-tls
      hosts:
        - mycoolmdm.stream
